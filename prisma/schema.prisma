generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model comments {
  comment_id Int       @id @default(autoincrement())
  user_id    Int?
  project_id Int?
  content    String
  created_at DateTime? @default(now()) @db.Timestamp(6)
  updated_at DateTime? @default(now()) @db.Timestamp(6)
  projects   projects? @relation(fields: [project_id], references: [project_id], onDelete: Cascade, onUpdate: NoAction)
  users      users?    @relation(fields: [user_id], references: [user_id], onDelete: Cascade, onUpdate: NoAction)
}

model likes {
  like_id    Int       @id @default(autoincrement())
  user_id    Int?
  project_id Int?
  created_at DateTime? @default(now()) @db.Timestamp(6)
  projects   projects? @relation(fields: [project_id], references: [project_id], onDelete: Cascade, onUpdate: NoAction)
  users      users?    @relation(fields: [user_id], references: [user_id], onDelete: Cascade, onUpdate: NoAction)

  @@unique([user_id, project_id], map: "unique_like")
}

model projects {
  project_id         Int        @id @default(autoincrement())
  name               String?    @db.VarChar(100)
  description        String?
  github_link        String?    @db.VarChar(255)
  youtube_video_link String?    @db.VarChar(255)
  is_public          Boolean?
  created_by         Int?
  created_at         DateTime?  @default(now()) @db.Timestamp(6)
  tags               String[]   @default([])
  comments           comments[]
  likes              likes[]
  users              users?     @relation(fields: [created_by], references: [user_id], onUpdate: NoAction)
}

model roles {
  role_id   Int         @id @default(autoincrement())
  role_name String?     @db.VarChar(50)
  user_role user_role[]
}

/// The underlying table does not contain a valid unique identifier and can therefore currently not be handled by Prisma Client.
model user_role {
  user_id Int
  role_id Int
  roles   roles @relation(fields: [role_id], references: [role_id], onDelete: Cascade, onUpdate: NoAction)
  users   users @relation(fields: [user_id], references: [user_id], onDelete: Cascade, onUpdate: NoAction)

  @@id([user_id, role_id])
}

model users {
  user_id       Int         @id @default(autoincrement())
  username      String?     @unique @db.VarChar(50)
  email         String?     @unique @db.VarChar(100)
  password_hash String?     @db.VarChar(255)
  comments      comments[]
  likes         likes[]
  projects      projects[]
  user_role     user_role[]
}
